#!/bin/bash
#######################################################
#                                                     #
# !!! Don't run me directly even this is shell script #
#  We will use the safe runner to run this            #
#                                                     #
#######################################################

#-------- List of CPPDEFINES ------------------------------------------------------------
# usage: --CPPDEFINES=D1,D2=x,D3=9
#
# - G_DENSE_HT_OCCUPANCY_PCT=80 (DenseHashMap factor: 1 to 99. Default 50, opt. is 80)
# - GraphNodeId_UseLong_  (if # of vertices is more than 4 billion. Default is uint32_t)
# - Degree_UseShort_      (degree use short to save space. Default is int)
# - NOPOST   (If the online system doesn't have any POST, add this flag to improve performance)
# - SINGLEEDGETYPE or MULTIEDGETYPES (multiple edge types or not. Single edge type will use less memory and better perf.)
#      if SINGLEEDGETYPE and no MULTIEDGETYPES: no edge type
#      all other case (none of either, has MULTIEDGETYPES only, or have both): multiple edge types
# - ONLINEALIAS    (If alias in online request, all IDS servers need to look for it)
# - GOOGLE_DENSEHASHMAP or GOOGLE_SPARSEHASHMAP: choose GOOGLE_SPARSEHASHMAP if IDS uses too much memory
#----------------------------------------------------------------------------------------
export GSQL_BUILD_SCONS="scons"
export GSQL_BUILD_FLAGS="--CPPDEFINES=GOOGLE_DENSEHASHMAP,MULTIEDGETYPES,__STDC_FORMAT_MACROS"
Da=$(grep CPPDEFINES= ../config/pkg.config | tail -1)
Db=${Da/*CPPDEFINES=/}
Dc=${Db%\\\"}
Dd=${Dc//,/ }
CFLAGS=
for d in $Dd ;do CFLAGS="$CFLAGS -D$d"; done

# Add version info
productVersion=$(./gworkspace.sh -c 2>/dev/null | head -1)
allVersion=$(< ./gsdk/VERSIONS.txt)
otherVersion=$(echo "$allVersion" | sed -e '1d') 
version="${productVersion}$otherVersion"
ver=$(echo "$version" | tr "\\\n" ',') 

CFLAGS="$CFLAGS \\\"-DBUILDVERSION=\\\\\\"$ver\\\\\\"\\\""
export CFLAGS

make -f MakeGPE clean
make -f MakeGPE

if [ ! -d ${GSQL_PKG_HOME}/bin ] ; then   mkdir -p ${GSQL_PKG_HOME}/bin ; fi

#######################################################################################
#                                                                                     #
# No need to change below in most cases                                               #
#                                                                                     #
#######################################################################################
# RESTPP related stuff
PARENT=$PWD
cd ${GSQL_PROJ_HOME}/src/customer/restpp_impl/filter_impl/; make clean;
make opt;
cp *.so  ${GSQL_PKG_HOME}/bin; git clean -f;
cp ${GSQL_PROJ_HOME}/src/customer/restpp_impl/endpoints  ${GSQL_PKG_HOME}/config/endpoints
cd  ${PARENT}

make -f MakeREST

cd  ${PARENT}

cp -RL gsdk/bin/release/* ${GSQL_PKG_HOME}/bin
cp -RL bin/release/* ${GSQL_PKG_HOME}/bin

mkdir -p ${GSQL_PKG_HOME}/third-party-pkgs

# to streamline a new deployment, copy configs
mkdir -p ${GSQL_PKG_HOME}/config
cp -RL ${GSQL_PROJ_HOME}/src/customer/config/* ${GSQL_PKG_HOME}/config
cp -RL ${GSQL_PROJ_HOME}/src/customer/core_impl/gsql_impl/loading_job ${GSQL_PKG_HOME}/config

mkdir -p ${GSQL_PKG_HOME}/scripts
cp -RL ${GSQL_PROJ_HOME}/src/customer/scripts/* ${GSQL_PKG_HOME}/scripts

# copy sanity check folder
mkdir -p ${GSQL_PKG_HOME}/sanity_check
cp -RL ${GSQL_PROJ_HOME}/src/customer/sanity_check/* ${GSQL_PKG_HOME}/sanity_check

# copy stress test folder
mkdir -p ${GSQL_PKG_HOME}/stress_test
cp -RL ${GSQL_PROJ_HOME}/src/customer/stress_test/* ${GSQL_PKG_HOME}/stress_test

# copy gsql DDL
mkdir -p ${GSQL_PKG_HOME}/gsql
cd  ${GSQL_PROJ_HOME}/gsql/src/TokenBank/; ./compile; cd -
cp -RL ${GSQL_PROJ_HOME}/gsql/* ${GSQL_PKG_HOME}/gsql 2>/dev/null || :
cp -RL ${GSQL_PROJ_HOME}/gsql/lib/*.so ${GSQL_PKG_HOME}/bin 2>/dev/null || :

# tutorial
cp -RL gsdk/tutorial ${GSQL_PKG_HOME}/ 2>/dev/null || :

# Add visualization
cp -r src/visualization ${GSQL_PKG_HOME}/visualization
