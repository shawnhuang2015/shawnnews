HOW TO GUIDE

In below struct, users will only work under src directory.
1) in src/TokenBank, implement input token UDFs, compile to generate "*.so" files
   Note this step is optional.
2) under src/ddl, create DDL scripts 
Then invokes gsql shell to generate graph schema and load the data.

==================================================================================

gsql              /* this folder is dev folder on both in-house and customer site */
├── README        /* readme */
├── config        /* gsql shell launch config */
├── gsql -> ../src/utility/tools/gshell/gsql.sh   /* user type this to launch shell */
├── lib/          /* this folder contains compiled .so file and .gsql.jar */
│   ├── .gsql.jar -> ../../src/utility/tools/gshell/gsql.jar   /* DDL driver */
│   ├── boost -> ../../src/third_party/boost               /* boost static lib */
│   ├──    ConditionBank1.so*    /* produced by TokenBank/compile */
│   ├──    ConditionBankM.so*    /* produced by TokenBank/compile */
│   ├──    TokenBank1.so*        /* produced by TokenBank/compile */
│   └──    TokenBankM.so*        /* produced by TokenBank/compile */
├── src
│   └── TokenBank     /* user implement below cpp files, and compile them with *compile*, the output will be put in gsql/lib/ */
│       │   ├── ConditionBank1.cpp -> ../../../src/customer/core_impl/gsql_impl/TokenBank/ConditionBank1.cpp
│       │   ├── ConditionBankM.cpp -> ../../../src/customer/core_impl/gsql_impl/TokenBank/ConditionBankM.cpp
│       │   ├── TokenBank1.cpp -> ../../../src/customer/core_impl/gsql_impl/TokenBank/TokenBank1.cpp
│       │   ├── TokenBankM.cpp -> ../../../src/customer/core_impl/gsql_impl/TokenBank/TokenBankM.cpp
│       │   └── compile -> ../../../src/utility/tools/gshell/compileTokenBank.sh /* user run this to compile this folder's cpp file */
│       └── ddl -> ../../src/customer/core_impl/gsql_impl/ddl    /* user provides their ddl scripts in this folder */
|            └── example -> ../../../../utility/tools/gshell/example /* many ddl examples showing the language */
└── output    /* shell output: graph_config.yaml by loading job or export cmd; and loading job log; */
      ├── graph_config.yaml -> ../../src/customer/core_impl/gsql_impl/graph_config.yaml  
      └── load_output.log  /* log of loading job */
