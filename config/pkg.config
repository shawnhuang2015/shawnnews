#!/bin/bash
#######################################################
#                                                     #
# !!! Don't run me directly even this is shell script #
#  We will use the safe runner to run this            #
#                                                     #
#######################################################

#-------- List of CPPDEFINES ------------------------------------------------------------
# usage: --CPPDEFINES=D1,D2=x,D3=9
#
# - G_DENSE_HT_OCCUPANCY_PCT=80 (DenseHashMap factor: 1 to 99. Default 50, opt. is 80)
# - GraphNodeId_UseLong_  (if # of vertices is more than 4 billion. Default is uint32_t)
# - Degree_UseShort_      (degree use short to save space. Default is int)
# - NOPOST   (If the online system doesn't have any POST, add this flag to improve performance)
# - MULTIEDGETYPES (If the graph schema has multiple edge types, must add this flag. Note no need to multiple vertex types)
# - ONLINEALIAS    (If alias in online request, all IDS servers need to look for it)
# - GOOGLE_DENSEHASHMAP or GOOGLE_SPARSEHASHMAP: choose GOOGLE_SPARSEHASHMAP if IDS uses too much memory
#----------------------------------------------------------------------------------------
export GSQL_BUILD_SCONS="scons"
export GSQL_BUILD_FLAGS="cb=1 --CPPDEFINES=GOOGLE_DENSEHASHMAP,MULTIEDGETYPES"
echo  "CPP build flags: ${GSQL_BUILD_FLAGS}"
${GSQL_BUILD_SCONS} poc_gpe_release  ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} poc_gpp_release  ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} gse2_release     ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} poc_gseloader_release  ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} poc_gse_canonnical_loader_release ${GSQL_BUILD_FLAGS}


mkdir -p ${GSQL_PKG_HOME}/bin
cp build/release/customer/core_impl/gpe_impl/poc_gpe_server  ${GSQL_PKG_HOME}/bin
cp build/release/customer/core_impl/gpp_impl/poc_gpp_server  ${GSQL_PKG_HOME}/bin
cp build/release/core/gse/ids_worker ${GSQL_PKG_HOME}/bin
cp build/release/olgp/gse/gse_loader ${GSQL_PKG_HOME}/bin
cp build/release/olgp/gse/gse_canonnical_loader ${GSQL_PKG_HOME}/bin

mkdir -p ${GSQL_PKG_HOME}/third-party-pkgs
${ER_HOME}/buildenv/rest_build.sh ${GSQL_PKG_HOME}/third-party-pkgs

# to streamline a new deployment, we'll also copy configs and scripts to mgnt_cli
mkdir -p ${GSQL_PKG_HOME}/config
cp -r ${GSQL_PROJ_HOME}/src/customer/config/* ${GSQL_PKG_HOME}/config
cp -r --remove-destination ${GSQL_PROJ_HOME}/src/customer/core_impl/gsql_impl/graph_config.yaml ${GSQL_PKG_HOME}/config
cp -r ${GSQL_PROJ_HOME}/src/customer/config/* ${GSQL_PROJ_HOME}/mgnt_cli/configs
cp -r --remove-destination ${GSQL_PROJ_HOME}/src/customer/core_impl/gsql_impl/graph_config.yaml ${GSQL_PKG_HOME}/mgnt_cli/config

mkdir -p ${GSQL_PKG_HOME}/scripts
cp -r ${GSQL_PROJ_HOME}/src/customer/scripts/* ${GSQL_PKG_HOME}/scripts
cp -r ${GSQL_PROJ_HOME}/src/customer/scripts/* ${GSQL_PROJ_HOME}/mgnt_cli/scripts

# copy sanity check folder
mkdir -p ${GSQL_PKG_HOME}/sanity_check
cp -r ${GSQL_PROJ_HOME}/src/customer/sanity_check/* ${GSQL_PKG_HOME}/sanity_check
mkdir -p ${GSQL_PROJ_HOME}/mgnt_cli/sanity_check
cp -r ${GSQL_PROJ_HOME}/src/customer/sanity_check/* ${GSQL_PROJ_HOME}/mgnt_cli/sanity_check

# copy stress test folder
mkdir -p ${GSQL_PKG_HOME}/stress_test
cp -r ${GSQL_PROJ_HOME}/src/customer/stress_test/* ${GSQL_PKG_HOME}/stress_test
mkdir -p ${GSQL_PROJ_HOME}/mgnt_cli/stress_test
cp -r ${GSQL_PROJ_HOME}/src/customer/stress_test/* ${GSQL_PROJ_HOME}/mgnt_cli/stress_test
