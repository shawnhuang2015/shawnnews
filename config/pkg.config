#!/bin/bash
#######################################################
#                                                     #
# !!! Don't run me directly even this is shell script #
#  We will use the safe runner to run this            #
#                                                     #
#######################################################

#-------- List of CPPDEFINES ------------------------------------------------------------
# usage: --CPPDEFINES=D1,D2=x,D3=9
#
# - G_DENSE_HT_OCCUPANCY_PCT=80 (DenseHashMap factor: 1 to 99. Default 50, opt. is 80)
# - GraphNodeId_UseLong_  (if # of vertices is more than 4 billion. Default is uint32_t)
# - Degree_UseShort_      (degree use short to save space. Default is int)
# - NOPOST   (If the online system doesn't have any POST, add this flag to improve performance)
# - SINGLEEDGETYPE or MULTIEDGETYPES (multiple edge types or not. Single edge type will use less memory and better perf.)
#      if SINGLEEDGETYPE and no MULTIEDGETYPES: no edge type
#      all other case (none of either, has MULTIEDGETYPES only, or have both): multiple edge types
# - ONLINEALIAS    (If alias in online request, all IDS servers need to look for it)
# - GOOGLE_DENSEHASHMAP or GOOGLE_SPARSEHASHMAP: choose GOOGLE_SPARSEHASHMAP if IDS uses too much memory
#----------------------------------------------------------------------------------------
export GSQL_BUILD_SCONS="scons"
export GSQL_BUILD_FLAGS="--CPPDEFINES=GOOGLE_DENSEHASHMAP,_DataConsistency"
echo  "CPP build flags: ${GSQL_BUILD_FLAGS}"
mkdir -p ${GSQL_PKG_HOME}/bin

${GSQL_BUILD_SCONS} poc_gpe_release  ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} gse2_release     ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} poc_gseloader_release  ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} generic_batch_loader_release ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} gsql_data_generator_release ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} poc_rest_release  ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} check_endpoints_release ${GSQL_BUILD_FLAGS}
${GSQL_BUILD_SCONS} statushubcli_release ${GSQL_BUILD_FLAGS}
# ${GSQL_BUILD_SCONS} poc_gpp_release  ${GSQL_BUILD_FLAGS};cp build/release/customer/core_impl/gpp_impl/poc_gpp_server  ${GSQL_PKG_HOME}/bin
# ${GSQL_BUILD_SCONS} graphdump_release ${GSQL_BUILD_FLAGS};cp build/release/olgp/tools/graphdump ${GSQL_PKG_HOME}/bin
# ${GSQL_BUILD_SCONS} batchdelta_release ${GSQL_BUILD_FLAGS};cp build/release/olgp/tools/batchdelta ${GSQL_PKG_HOME}/bin
${GSQL_BUILD_SCONS} schemaupdate_release ${GSQL_BUILD_FLAGS};cp build/release/olgp/tools/schemaupdate ${GSQL_PKG_HOME}/bin

#compile gpath
bash src/gpath/gsql_compile_gpath.sh ${GSQL_PROJ_HOME}/src



#######################################################################################
#                                                                                     #
# No need to change below in most cases                                               #
#                                                      
                               #
#######################################################################################
mkdir -p ${GSQL_PKG_HOME}/bin
cp build/release/customer/core_impl/gpe_impl/poc_gpe_server  ${GSQL_PKG_HOME}/bin
cp build/release/core/gse/ids_worker ${GSQL_PKG_HOME}/bin
cp build/release/core/gse/ids_worker ${GSQL_PKG_HOME}/bin/gse_dump
cp build/release/customer/restpp_impl/poc_rest_server  ${GSQL_PKG_HOME}/bin
cp build/release/customer/restpp_impl/check_endpoints  ${GSQL_PKG_HOME}/bin
cp build/release/olgp/gse/gse_loader ${GSQL_PKG_HOME}/bin
cp build/release/olgp/tools/statushubcli ${GSQL_PKG_HOME}/bin
cp build/release/olgp/gse/generic_batch_loader ${GSQL_PKG_HOME}/bin
cp build/release/utility/tools/data_gen/gsql_data_generator ${GSQL_PKG_HOME}/bin

# Visualization
cp -r src/visualization ${GSQL_PKG_HOME}/visualization

# Copy gpath jars
cp -r src/gpath/jar_folders/*.jar ${GSQL_PKG_HOME}/bin
cp -r src/gpath/libs/*.jar ${GSQL_PKG_HOME}/bin


# RESTPP related stuff
cd ${GSQL_PROJ_HOME}/src/customer/restpp_impl/filter_impl/; make clean;
make opt
${GSQL_PKG_HOME}/bin/check_endpoints -e ${GSQL_PROJ_HOME}/src/customer/restpp_impl/endpoints -s ${GSQL_PROJ_HOME}/src/customer/config/graph_config.yaml -f  ${GSQL_PROJ_HOME}/src/customer/restpp_impl/filter_impl/filters.so || echo "${bldred}$0 Warning: REST++ validation failed.${txtrst}"
cp *.so  ${GSQL_PKG_HOME}/bin; git clean -f;
cp ${GSQL_PROJ_HOME}/src/customer/restpp_impl/endpoints  ${GSQL_PKG_HOME}/config/endpoints


mkdir -p ${GSQL_PKG_HOME}/third-party-pkgs
cp -RL ${THIRD_PARTY_HOME}/nginx ${GSQL_PKG_HOME}/third-party-pkgs/ 2>/dev/null || :

# to streamline a new deployment, we'll also copy configs
mkdir -p ${GSQL_PKG_HOME}/config
cp -RL ${GSQL_PROJ_HOME}/src/customer/config/* ${GSQL_PKG_HOME}/config
cp -RL ${GSQL_PROJ_HOME}/src/customer/core_impl/gsql_impl/loading_job ${GSQL_PKG_HOME}/config

mkdir -p ${GSQL_PKG_HOME}/scripts
cp -RL ${GSQL_PROJ_HOME}/src/customer/scripts/* ${GSQL_PKG_HOME}/scripts

# copy sanity check folder
mkdir -p ${GSQL_PKG_HOME}/sanity_check
cp -RL ${GSQL_PROJ_HOME}/src/customer/sanity_check/* ${GSQL_PKG_HOME}/sanity_check
#mkdir -p ${GSQL_PROJ_HOME}/mgnt_cli/sanity_check

# copy stress test folder
mkdir -p ${GSQL_PKG_HOME}/stress_test
cp -RL ${GSQL_PROJ_HOME}/src/customer/stress_test/* ${GSQL_PKG_HOME}/stress_test

# copy gsql DDL
mkdir -p ${GSQL_PKG_HOME}/gsql
rm -rf ${GSQL_PROJ_HOME}/gsql/lib/*.so
cp -RL ${GSQL_PROJ_HOME}/gsql/* ${GSQL_PKG_HOME}/gsql 2>/dev/null || :
