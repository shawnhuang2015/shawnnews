{
   "example":{
      "GET/POST":{
         "function":"example",
         "action":"query",
         "target":"GPE",
         "parameters":{
            "start_id":{
               "type":"STRING",
               "min_count":1,
               "max_count":1,
               "min_length":1,
               "max_length":256
            }
         },
         "response_filter":"ResponseFilterExample",
         "summary":"This is an example UDF to demonstrate how to write endpoint configuration"
      }
   },
   "kstepsubgraph":{
    "GET/POST":{
      "function":"kstepsubgraph",
      "action":"query",
      "target":"GPE",
      "parameters":{
        "id":{
          "type":"STRING",
          "is_id":true,
          "id_type":"$type"
        },
        "type": {
          "type":"TYPENAME"
        },
        "depth":{
          "type":"UINT32",
          "min_count":0
        },
        "max":{
          "type":"UINT32",
          "min_count":0
        }
      },
      "summary":"This is an UDF to output N depth neighborhood subgraph."
    }
   },

  "semantic_def": {
    "POST": {
      "function": "semantic_def",
      "parameters": {
      },
      "request_filter": "WrapPayloadFilter",
      "summary": "json format definition of semantic layer."
    }
  },
  "ontology_import": {
    "POST": {
      "function": "ontology_import",
      "parameters": {
        "object": {
          "type": "STRING"
        },
        "name": {
          "type": "STRING"
        },
        "sep": {
          "type": "STRING",
          "default": ","
        },
        "eol": {
          "type": "STRING",
          "default": "\n"
        }
      },
      "response_filter":"PostOntologyTree",
      "summary": "json format ontology tree, call import_tree."
    }
  },
  "import_tree": {
    "POST": {
      "function": "import_tree",
      "parameters": {
        "name": {
          "type": "STRING"
        },
        "sep": {
          "type": "STRING",
          "default": ","
        },
        "eol": {
          "type": "STRING",
          "default": "\n"
        }
      },
      "request_filter":"ImportTree",
      "summary": "load the tree."
    }
  },
  "user_search": {
    "POST": {
      "function": "user_search",
      "parameters": {
        "limit": {
          "type": "UINT32",
          "min_count": 0
        }
      },
      "request_filter": "UserSearchFilter"
    }
  },
  "get_ontology": {
    "GET": {
      "function": "get_ontology",
      "parameters": {
        "name": {
          "type": "STRING",
          "min_count": 1,
          "max_count": 100
        },
        "threshold": {
          "type": "UINT64",
          "default": "100000"
        }
      },
      "summary": "export the tree."
    }
  },
  "get_profile": {
    "GET": {
      "function": "get_profile",
      "parameters": {
      },
      "summary": "export profile."
    }
  }
}
